Testing info for user_data by Daniel Friberg

This section is written as a report as unit testing was difficult for 
this interface class, and integration testing was better tested via
behavior seen within the HomePage than by isolation testing. Also, the code 
was written prior to unit testing lectures, so TDD methods were not used.

Testing was done by static methods and analysis of behavior out of isolation.
This file documents several issues I ran across and my attempts to work
around them.


User data class is a fat interface that acts as the abstraction layer 
between the HomePage class and its lower level service providers in an
attempt to establish dependency inversion. It is where the bulk of the
coding work has been accomplished

The original HomePage had nearly all of the used TypeScript on it, making
it exceedingly bulky and hard for users to read. In an attempt to make my
code adhere to clean code standards, much of the functionality in home.ts 
was migrated to user_page.ts, which was then imported into home.ts as the
field "user". HomePage was then reserved for functions called via user 
interaction and for functions that facilitate user interaction, such as 
the updateInfo() feature which calls updates to data automatically.
By splitting and cleaning of code, as well as extensive documentation and 
a mini-guide to ajax, I aimed to make it easier for others in my group to 
review the code and extend it.

User_data (then named page_data) holds the ajax calls and functions 
that handled data returns from them, as well as calls to the data visualizer
to request updating of the data. Much of my testing was done from here.

Issue 1: 
  Ajax call errors:
    In the documentation provided by one of our mentors was a series of
    urls that ajax calls were to be sent to, as well as required parameters
    In particular, one sent to *base url*/api/user/:nid was constantly returning
    errors.

    This error was tested extensively by formatting differently, setting up 
    different ways to send data, etc...

    It turns out that the documents provided included obsolete API calls.
    This "bug" was fixed by discussion with the API provider (@bobbylyons)
    and frequent conversations with our group mentors thereafter.

Issue 2:
  Use of Ajax Data Outside of Scope:
    Due to the asynchronous nature of ajax calls, data assigned to variables
    within an ajax call will still be null until the ajax call has returned, 
    often long after functions demanding such variables are utilized. One such
    data is the list of node ids, which was being used in the constructor for
    this class in home.ts. 

    User_data is unique to a single node, with a corresponding unique ID for 
    the node. This node id can be changed but is required in the constructor
    as all API calls to set up data rely upon a node ID parameter, nor would
    it be feasible to store data from all nodes assigned to a single user to
    be saved locally, considering a user can have hundreds of nodes. 
    
    As the call for a new user_data object initially immediately followed a call
    to update the list of node ids, the node id list was still null when the
    constructor demanded a value. 

    This was worked around by instead making an initial list of node ids in
    login.ts, using data returned from the servers when authenticating the user.
    Since the login process was essentially synchronous, as a response of the 
    server was required to log in, there was no possibility of the scope 
    exiting the call and calling the user_page constructor. Thus, a list of node
    ids was compiled there, converted to JSON and stored in localStorage, then
    converted back into a list of numbers. In the same way an api token is
    guaranteed to exist in the constructor of HomePage, a list of node ids
    was guaranteed to exist in a similar fashion. 

Issue 3: 
  Latest Data display on buttons
    Unbeknownst at the time, HTML element values are displayed when they are
    notified of a change in value of a field (at least in the way I implemented them).
    This meant that the attempted method of updating them by returning a value
    via a function did not work, since this method would not fire an event notifying
    that a field value has been changed.

    This was worked around by having the buttons on Home.html directly access the 
    _data field. This breaks a design principle I wanted to uphold but my lack of 
    knowledge of HTML made me unable to code it to work another way. Unfortunately, 
    this also means that I have no way of handling edge cases in data (such as null
    data frequently seen in our unpopulated data server).

    This was resolved by instead populating button data from /latest api call, which
    is guaranteed to return the latest non null data. There may be a mismatch between
    what is seen on the graph and the buttons. 

